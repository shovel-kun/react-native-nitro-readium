///
/// HybridNitroReadiumSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Locator` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Locator; }
// Forward declaration of `EpubPreferences` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct EpubPreferences; }
// Forward declaration of `Decoration` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Decoration; }
// Forward declaration of `Selection` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Selection; }
// Forward declaration of `DecorationActivatedEvent` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct DecorationActivatedEvent; }
// Forward declaration of `TapEvent` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct TapEvent; }
// Forward declaration of `DragEvent` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct DragEvent; }

#include <optional>
#include <string>
#include "Locator.hpp"
#include "EpubPreferences.hpp"
#include <vector>
#include "Decoration.hpp"
#include <functional>
#include "Selection.hpp"
#include "DecorationActivatedEvent.hpp"
#include "TapEvent.hpp"
#include "DragEvent.hpp"
#include <NitroModules/Promise.hpp>

namespace margelo::nitro::nitroreadium {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NitroReadium`
   * Inherit this class to create instances of `HybridNitroReadiumSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNitroReadium: public HybridNitroReadiumSpec {
   * public:
   *   HybridNitroReadium(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNitroReadiumSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNitroReadiumSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridNitroReadiumSpec() override = default;

    public:
      // Properties
      virtual std::optional<std::string> getAbsolutePath() = 0;
      virtual void setAbsolutePath(const std::optional<std::string>& absolutePath) = 0;
      virtual std::optional<Locator> getLocator() = 0;
      virtual void setLocator(const std::optional<Locator>& locator) = 0;
      virtual std::optional<EpubPreferences> getPreferences() = 0;
      virtual void setPreferences(const std::optional<EpubPreferences>& preferences) = 0;
      virtual std::optional<std::vector<Decoration>> getDecorations() = 0;
      virtual void setDecorations(const std::optional<std::vector<Decoration>>& decorations) = 0;
      virtual std::optional<std::string> getInjectedJavascript() = 0;
      virtual void setInjectedJavascript(const std::optional<std::string>& injectedJavascript) = 0;
      virtual std::optional<std::string> getInjectedJavascriptTarget() = 0;
      virtual void setInjectedJavascriptTarget(const std::optional<std::string>& injectedJavascriptTarget) = 0;
      virtual std::optional<std::function<void(const Locator& /* locator */)>> getOnLocatorChanged() = 0;
      virtual void setOnLocatorChanged(const std::optional<std::function<void(const Locator& /* locator */)>>& onLocatorChanged) = 0;
      virtual std::optional<std::function<void(const std::optional<Selection>& /* selection */)>> getOnSelection() = 0;
      virtual void setOnSelection(const std::optional<std::function<void(const std::optional<Selection>& /* selection */)>>& onSelection) = 0;
      virtual std::optional<std::function<void(const DecorationActivatedEvent& /* event */)>> getOnDecorationActivated() = 0;
      virtual void setOnDecorationActivated(const std::optional<std::function<void(const DecorationActivatedEvent& /* event */)>>& onDecorationActivated) = 0;
      virtual std::optional<std::function<void(const TapEvent& /* event */)>> getOnTap() = 0;
      virtual void setOnTap(const std::optional<std::function<void(const TapEvent& /* event */)>>& onTap) = 0;
      virtual std::optional<std::function<void(const DragEvent& /* event */)>> getOnDrag() = 0;
      virtual void setOnDrag(const std::optional<std::function<void(const DragEvent& /* event */)>>& onDrag) = 0;
      virtual std::optional<std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>> getOnPageChanged() = 0;
      virtual void setOnPageChanged(const std::optional<std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>>& onPageChanged) = 0;
      virtual std::optional<std::function<void()>> getOnPageLoaded() = 0;
      virtual void setOnPageLoaded(const std::optional<std::function<void()>>& onPageLoaded) = 0;
      virtual std::optional<std::function<void(const std::string& /* message */)>> getOnMessage() = 0;
      virtual void setOnMessage(const std::optional<std::function<void(const std::string& /* message */)>>& onMessage) = 0;

    public:
      // Methods
      virtual std::shared_ptr<Promise<std::optional<std::string>>> evaluateJavascript(const std::string& script) = 0;
      virtual void injectJavascript(const std::string& script) = 0;
      virtual void go(const Locator& locator) = 0;
      virtual void clearSelection() = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NitroReadium";
  };

} // namespace margelo::nitro::nitroreadium
