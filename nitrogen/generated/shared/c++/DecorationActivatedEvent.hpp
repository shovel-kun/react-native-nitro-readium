///
/// DecorationActivatedEvent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Decoration` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Decoration; }
// Forward declaration of `Rect` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Rect; }
// Forward declaration of `Point` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Point; }

#include "Decoration.hpp"
#include <string>
#include <optional>
#include "Rect.hpp"
#include "Point.hpp"

namespace margelo::nitro::nitroreadium {

  /**
   * A struct which can be represented as a JavaScript object (DecorationActivatedEvent).
   */
  struct DecorationActivatedEvent {
  public:
    Decoration decoration     SWIFT_PRIVATE;
    std::string group     SWIFT_PRIVATE;
    std::optional<Rect> rect     SWIFT_PRIVATE;
    std::optional<Point> point     SWIFT_PRIVATE;

  public:
    DecorationActivatedEvent() = default;
    explicit DecorationActivatedEvent(Decoration decoration, std::string group, std::optional<Rect> rect, std::optional<Point> point): decoration(decoration), group(group), rect(rect), point(point) {}
  };

} // namespace margelo::nitro::nitroreadium

namespace margelo::nitro {

  using namespace margelo::nitro::nitroreadium;

  // C++ DecorationActivatedEvent <> JS DecorationActivatedEvent (object)
  template <>
  struct JSIConverter<DecorationActivatedEvent> final {
    static inline DecorationActivatedEvent fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return DecorationActivatedEvent(
        JSIConverter<Decoration>::fromJSI(runtime, obj.getProperty(runtime, "decoration")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "group")),
        JSIConverter<std::optional<Rect>>::fromJSI(runtime, obj.getProperty(runtime, "rect")),
        JSIConverter<std::optional<Point>>::fromJSI(runtime, obj.getProperty(runtime, "point"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const DecorationActivatedEvent& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "decoration", JSIConverter<Decoration>::toJSI(runtime, arg.decoration));
      obj.setProperty(runtime, "group", JSIConverter<std::string>::toJSI(runtime, arg.group));
      obj.setProperty(runtime, "rect", JSIConverter<std::optional<Rect>>::toJSI(runtime, arg.rect));
      obj.setProperty(runtime, "point", JSIConverter<std::optional<Point>>::toJSI(runtime, arg.point));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<Decoration>::canConvert(runtime, obj.getProperty(runtime, "decoration"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "group"))) return false;
      if (!JSIConverter<std::optional<Rect>>::canConvert(runtime, obj.getProperty(runtime, "rect"))) return false;
      if (!JSIConverter<std::optional<Point>>::canConvert(runtime, obj.getProperty(runtime, "point"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
