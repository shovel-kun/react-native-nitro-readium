///
/// Theme.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitroreadium {

  /**
   * An enum which can be represented as a JavaScript union (Theme).
   */
  enum class Theme {
    LIGHT      SWIFT_NAME(light) = 0,
    DARK      SWIFT_NAME(dark) = 1,
    SEPIA      SWIFT_NAME(sepia) = 2,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitroreadium

namespace margelo::nitro {

  using namespace margelo::nitro::nitroreadium;

  // C++ Theme <> JS Theme (union)
  template <>
  struct JSIConverter<Theme> final {
    static inline Theme fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("light"): return Theme::LIGHT;
        case hashString("dark"): return Theme::DARK;
        case hashString("sepia"): return Theme::SEPIA;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum Theme - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, Theme arg) {
      switch (arg) {
        case Theme::LIGHT: return JSIConverter<std::string>::toJSI(runtime, "light");
        case Theme::DARK: return JSIConverter<std::string>::toJSI(runtime, "dark");
        case Theme::SEPIA: return JSIConverter<std::string>::toJSI(runtime, "sepia");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert Theme to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("light"):
        case hashString("dark"):
        case hashString("sepia"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
