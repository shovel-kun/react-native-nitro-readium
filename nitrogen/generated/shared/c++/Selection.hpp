///
/// Selection.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Locator` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Locator; }
// Forward declaration of `Rect` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Rect; }

#include "Locator.hpp"
#include <optional>
#include "Rect.hpp"

namespace margelo::nitro::nitroreadium {

  /**
   * A struct which can be represented as a JavaScript object (Selection).
   */
  struct Selection {
  public:
    Locator locator     SWIFT_PRIVATE;
    std::optional<Rect> rect     SWIFT_PRIVATE;

  public:
    Selection() = default;
    explicit Selection(Locator locator, std::optional<Rect> rect): locator(locator), rect(rect) {}
  };

} // namespace margelo::nitro::nitroreadium

namespace margelo::nitro {

  using namespace margelo::nitro::nitroreadium;

  // C++ Selection <> JS Selection (object)
  template <>
  struct JSIConverter<Selection> final {
    static inline Selection fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Selection(
        JSIConverter<Locator>::fromJSI(runtime, obj.getProperty(runtime, "locator")),
        JSIConverter<std::optional<Rect>>::fromJSI(runtime, obj.getProperty(runtime, "rect"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Selection& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "locator", JSIConverter<Locator>::toJSI(runtime, arg.locator));
      obj.setProperty(runtime, "rect", JSIConverter<std::optional<Rect>>::toJSI(runtime, arg.rect));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<Locator>::canConvert(runtime, obj.getProperty(runtime, "locator"))) return false;
      if (!JSIConverter<std::optional<Rect>>::canConvert(runtime, obj.getProperty(runtime, "rect"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
