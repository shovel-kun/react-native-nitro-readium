///
/// Locator.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Locations` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Locations; }
// Forward declaration of `TextObject` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct TextObject; }

#include <string>
#include <optional>
#include "Locations.hpp"
#include "TextObject.hpp"

namespace margelo::nitro::nitroreadium {

  /**
   * A struct which can be represented as a JavaScript object (Locator).
   */
  struct Locator {
  public:
    std::string href     SWIFT_PRIVATE;
    std::string type     SWIFT_PRIVATE;
    std::optional<std::string> title     SWIFT_PRIVATE;
    std::optional<Locations> locations     SWIFT_PRIVATE;
    std::optional<TextObject> text     SWIFT_PRIVATE;

  public:
    Locator() = default;
    explicit Locator(std::string href, std::string type, std::optional<std::string> title, std::optional<Locations> locations, std::optional<TextObject> text): href(href), type(type), title(title), locations(locations), text(text) {}
  };

} // namespace margelo::nitro::nitroreadium

namespace margelo::nitro {

  using namespace margelo::nitro::nitroreadium;

  // C++ Locator <> JS Locator (object)
  template <>
  struct JSIConverter<Locator> final {
    static inline Locator fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Locator(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "href")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "type")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "title")),
        JSIConverter<std::optional<Locations>>::fromJSI(runtime, obj.getProperty(runtime, "locations")),
        JSIConverter<std::optional<TextObject>>::fromJSI(runtime, obj.getProperty(runtime, "text"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Locator& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "href", JSIConverter<std::string>::toJSI(runtime, arg.href));
      obj.setProperty(runtime, "type", JSIConverter<std::string>::toJSI(runtime, arg.type));
      obj.setProperty(runtime, "title", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.title));
      obj.setProperty(runtime, "locations", JSIConverter<std::optional<Locations>>::toJSI(runtime, arg.locations));
      obj.setProperty(runtime, "text", JSIConverter<std::optional<TextObject>>::toJSI(runtime, arg.text));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "href"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "type"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "title"))) return false;
      if (!JSIConverter<std::optional<Locations>>::canConvert(runtime, obj.getProperty(runtime, "locations"))) return false;
      if (!JSIConverter<std::optional<TextObject>>::canConvert(runtime, obj.getProperty(runtime, "text"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
