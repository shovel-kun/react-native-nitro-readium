///
/// Rect.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif





namespace margelo::nitro::nitroreadium {

  /**
   * A struct which can be represented as a JavaScript object (Rect).
   */
  struct Rect {
  public:
    double left     SWIFT_PRIVATE;
    double top     SWIFT_PRIVATE;
    double right     SWIFT_PRIVATE;
    double bottom     SWIFT_PRIVATE;

  public:
    Rect() = default;
    explicit Rect(double left, double top, double right, double bottom): left(left), top(top), right(right), bottom(bottom) {}
  };

} // namespace margelo::nitro::nitroreadium

namespace margelo::nitro {

  using namespace margelo::nitro::nitroreadium;

  // C++ Rect <> JS Rect (object)
  template <>
  struct JSIConverter<Rect> final {
    static inline Rect fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Rect(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "left")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "top")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "right")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "bottom"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Rect& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "left", JSIConverter<double>::toJSI(runtime, arg.left));
      obj.setProperty(runtime, "top", JSIConverter<double>::toJSI(runtime, arg.top));
      obj.setProperty(runtime, "right", JSIConverter<double>::toJSI(runtime, arg.right));
      obj.setProperty(runtime, "bottom", JSIConverter<double>::toJSI(runtime, arg.bottom));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "left"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "top"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "right"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "bottom"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
