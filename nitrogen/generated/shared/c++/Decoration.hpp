///
/// Decoration.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Locator` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Locator; }
// Forward declaration of `DecorationStyle` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct DecorationStyle; }

#include <string>
#include "Locator.hpp"
#include "DecorationStyle.hpp"

namespace margelo::nitro::nitroreadium {

  /**
   * A struct which can be represented as a JavaScript object (Decoration).
   */
  struct Decoration {
  public:
    std::string id     SWIFT_PRIVATE;
    Locator locator     SWIFT_PRIVATE;
    DecorationStyle style     SWIFT_PRIVATE;

  public:
    Decoration() = default;
    explicit Decoration(std::string id, Locator locator, DecorationStyle style): id(id), locator(locator), style(style) {}
  };

} // namespace margelo::nitro::nitroreadium

namespace margelo::nitro {

  using namespace margelo::nitro::nitroreadium;

  // C++ Decoration <> JS Decoration (object)
  template <>
  struct JSIConverter<Decoration> final {
    static inline Decoration fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Decoration(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "id")),
        JSIConverter<Locator>::fromJSI(runtime, obj.getProperty(runtime, "locator")),
        JSIConverter<DecorationStyle>::fromJSI(runtime, obj.getProperty(runtime, "style"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Decoration& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "id", JSIConverter<std::string>::toJSI(runtime, arg.id));
      obj.setProperty(runtime, "locator", JSIConverter<Locator>::toJSI(runtime, arg.locator));
      obj.setProperty(runtime, "style", JSIConverter<DecorationStyle>::toJSI(runtime, arg.style));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "id"))) return false;
      if (!JSIConverter<Locator>::canConvert(runtime, obj.getProperty(runtime, "locator"))) return false;
      if (!JSIConverter<DecorationStyle>::canConvert(runtime, obj.getProperty(runtime, "style"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
