///
/// Locations.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <vector>
#include <string>

namespace margelo::nitro::nitroreadium {

  /**
   * A struct which can be represented as a JavaScript object (Locations).
   */
  struct Locations {
  public:
    std::optional<std::vector<std::string>> fragments     SWIFT_PRIVATE;
    std::optional<double> progression     SWIFT_PRIVATE;
    std::optional<double> position     SWIFT_PRIVATE;
    std::optional<double> totalProgression     SWIFT_PRIVATE;

  public:
    Locations() = default;
    explicit Locations(std::optional<std::vector<std::string>> fragments, std::optional<double> progression, std::optional<double> position, std::optional<double> totalProgression): fragments(fragments), progression(progression), position(position), totalProgression(totalProgression) {}
  };

} // namespace margelo::nitro::nitroreadium

namespace margelo::nitro {

  using namespace margelo::nitro::nitroreadium;

  // C++ Locations <> JS Locations (object)
  template <>
  struct JSIConverter<Locations> final {
    static inline Locations fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Locations(
        JSIConverter<std::optional<std::vector<std::string>>>::fromJSI(runtime, obj.getProperty(runtime, "fragments")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "progression")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "position")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "totalProgression"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Locations& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "fragments", JSIConverter<std::optional<std::vector<std::string>>>::toJSI(runtime, arg.fragments));
      obj.setProperty(runtime, "progression", JSIConverter<std::optional<double>>::toJSI(runtime, arg.progression));
      obj.setProperty(runtime, "position", JSIConverter<std::optional<double>>::toJSI(runtime, arg.position));
      obj.setProperty(runtime, "totalProgression", JSIConverter<std::optional<double>>::toJSI(runtime, arg.totalProgression));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::vector<std::string>>>::canConvert(runtime, obj.getProperty(runtime, "fragments"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "progression"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "position"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "totalProgression"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
