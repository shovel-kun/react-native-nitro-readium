///
/// TextObject.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <string>

namespace margelo::nitro::nitroreadium {

  /**
   * A struct which can be represented as a JavaScript object (TextObject).
   */
  struct TextObject {
  public:
    std::optional<std::string> after     SWIFT_PRIVATE;
    std::optional<std::string> before     SWIFT_PRIVATE;
    std::optional<std::string> highlight     SWIFT_PRIVATE;

  public:
    TextObject() = default;
    explicit TextObject(std::optional<std::string> after, std::optional<std::string> before, std::optional<std::string> highlight): after(after), before(before), highlight(highlight) {}
  };

} // namespace margelo::nitro::nitroreadium

namespace margelo::nitro {

  using namespace margelo::nitro::nitroreadium;

  // C++ TextObject <> JS TextObject (object)
  template <>
  struct JSIConverter<TextObject> final {
    static inline TextObject fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return TextObject(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "after")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "before")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "highlight"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const TextObject& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "after", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.after));
      obj.setProperty(runtime, "before", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.before));
      obj.setProperty(runtime, "highlight", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.highlight));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "after"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "before"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "highlight"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
