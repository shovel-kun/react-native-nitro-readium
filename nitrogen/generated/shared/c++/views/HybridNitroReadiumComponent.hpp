///
/// HybridNitroReadiumComponent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <optional>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/NitroHash.hpp>
#include <NitroModules/CachedProp.hpp>
#include <react/renderer/core/ConcreteComponentDescriptor.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/components/view/ConcreteViewShadowNode.h>
#include <react/renderer/components/view/ViewProps.h>

#include "NitroFileSource.hpp"
#include <optional>
#include "Locator.hpp"
#include <optional>
#include "EpubPreferences.hpp"
#include <optional>
#include <vector>
#include "Decoration.hpp"
#include <optional>
#include <string>
#include <optional>
#include <string>
#include <optional>
#include <functional>
#include "Locator.hpp"
#include <optional>
#include <functional>
#include <optional>
#include "Selection.hpp"
#include <optional>
#include <functional>
#include "DecorationActivatedEvent.hpp"
#include <optional>
#include <functional>
#include "TapEvent.hpp"
#include <optional>
#include <functional>
#include "DragEvent.hpp"
#include <optional>
#include <functional>
#include "Locator.hpp"
#include <optional>
#include <functional>
#include <optional>
#include <functional>
#include "EpubPreferences.hpp"
#include <optional>
#include <functional>
#include <string>
#include <optional>
#include <functional>
#include <memory>
#include "HybridNitroReadiumSpec.hpp"

namespace margelo::nitro::nitroreadium::views {

  using namespace facebook;

  /**
   * The name of the actual native View.
   */
  extern const char HybridNitroReadiumComponentName[];

  /**
   * Props for the "NitroReadium" View.
   */
  class HybridNitroReadiumProps final: public react::ViewProps {
  public:
    HybridNitroReadiumProps() = default;
    HybridNitroReadiumProps(const HybridNitroReadiumProps&);
    HybridNitroReadiumProps(const react::PropsParserContext& context,
                            const HybridNitroReadiumProps& sourceProps,
                            const react::RawProps& rawProps);

  public:
    CachedProp<NitroFileSource> nitroSource;
    CachedProp<std::optional<Locator>> locator;
    CachedProp<std::optional<EpubPreferences>> preferences;
    CachedProp<std::optional<std::vector<Decoration>>> decorations;
    CachedProp<std::optional<std::string>> injectedJavascriptOnResourcesLoad;
    CachedProp<std::optional<std::string>> injectedJavascriptOnPageLoad;
    CachedProp<std::optional<std::function<void(const Locator& /* locator */)>>> onLocatorChanged;
    CachedProp<std::optional<std::function<void(const std::optional<Selection>& /* selection */)>>> onSelection;
    CachedProp<std::optional<std::function<void(const DecorationActivatedEvent& /* event */)>>> onDecorationActivated;
    CachedProp<std::optional<std::function<void(const TapEvent& /* event */)>>> onTap;
    CachedProp<std::optional<std::function<void(const DragEvent& /* event */)>>> onDrag;
    CachedProp<std::optional<std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>>> onPageChanged;
    CachedProp<std::optional<std::function<void()>>> onPageLoaded;
    CachedProp<std::optional<std::function<void(const EpubPreferences& /* preferences */)>>> onPreferencesChanged;
    CachedProp<std::optional<std::function<void(const std::string& /* message */)>>> onMessage;
    CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::nitroreadium::HybridNitroReadiumSpec>& /* ref */)>>> hybridRef;

  private:
    static bool filterObjectKeys(const std::string& propName);
  };

  /**
   * State for the "NitroReadium" View.
   */
  class HybridNitroReadiumState final {
  public:
    HybridNitroReadiumState() = default;

  public:
    void setProps(const HybridNitroReadiumProps& props) { _props.emplace(props); }
    const std::optional<HybridNitroReadiumProps>& getProps() const { return _props; }

  public:
#ifdef ANDROID
  HybridNitroReadiumState(const HybridNitroReadiumState& /* previousState */, folly::dynamic /* data */) {}
  folly::dynamic getDynamic() const {
    throw std::runtime_error("HybridNitroReadiumState does not support folly!");
  }
  react::MapBuffer getMapBuffer() const {
    throw std::runtime_error("HybridNitroReadiumState does not support MapBuffer!");
  };
#endif

  private:
    std::optional<HybridNitroReadiumProps> _props;
  };

  /**
   * The Shadow Node for the "NitroReadium" View.
   */
  using HybridNitroReadiumShadowNode = react::ConcreteViewShadowNode<HybridNitroReadiumComponentName /* "HybridNitroReadium" */,
                                                                     HybridNitroReadiumProps /* custom props */,
                                                                     react::ViewEventEmitter /* default */,
                                                                     HybridNitroReadiumState /* custom state */>;

  /**
   * The Component Descriptor for the "NitroReadium" View.
   */
  class HybridNitroReadiumComponentDescriptor final: public react::ConcreteComponentDescriptor<HybridNitroReadiumShadowNode> {
  public:
    HybridNitroReadiumComponentDescriptor(const react::ComponentDescriptorParameters& parameters);

  public:
    /**
     * A faster path for cloning props - reuses the caching logic from `HybridNitroReadiumProps`.
     */
    react::Props::Shared cloneProps(const react::PropsParserContext& context,
                                    const react::Props::Shared& props,
                                    react::RawProps rawProps) const override;
#ifdef ANDROID
    void adopt(react::ShadowNode& shadowNode) const override;
#endif
  };

  /* The actual view for "NitroReadium" needs to be implemented in platform-specific code. */

} // namespace margelo::nitro::nitroreadium::views
