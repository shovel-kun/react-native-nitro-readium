///
/// HybridPublicationSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridPublicationSpec``
public protocol HybridPublicationSpec_protocol: HybridObject {
  // Properties
  var manifest: String { get set }
  var tableOfContents: String { get set }
  var images: String { get set }

  // Methods
  func cover() throws -> Promise<String>
}

/// See ``HybridPublicationSpec``
public class HybridPublicationSpec_base {
  private weak var cxxWrapper: HybridPublicationSpec_cxx? = nil
  public func getCxxWrapper() -> HybridPublicationSpec_cxx {
  #if DEBUG
    guard self is HybridPublicationSpec else {
      fatalError("`self` is not a `HybridPublicationSpec`! Did you accidentally inherit from `HybridPublicationSpec_base` instead of `HybridPublicationSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridPublicationSpec_cxx(self as! HybridPublicationSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Publication HybridObject.
 * Implement this protocol to create Swift-based instances of Publication.
 * ```swift
 * class HybridPublication : HybridPublicationSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridPublicationSpec = HybridPublicationSpec_protocol & HybridPublicationSpec_base
