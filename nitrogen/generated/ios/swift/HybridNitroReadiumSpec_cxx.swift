///
/// HybridNitroReadiumSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridNitroReadiumSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class HybridNitroReadiumSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::nitroreadium::bridge::swift`)
   * from `NitroReadium-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.nitroreadium.bridge.swift

  /**
   * Holds an instance of the `HybridNitroReadiumSpec` Swift protocol.
   */
  private var __implementation: any HybridNitroReadiumSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_margelo__nitro__nitroreadium__HybridNitroReadiumSpec_

  /**
   * Create a new `HybridNitroReadiumSpec_cxx` that wraps the given `HybridNitroReadiumSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridNitroReadiumSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridNitroReadiumSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridNitroReadiumSpec() -> any HybridNitroReadiumSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridNitroReadiumSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridNitroReadiumSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridNitroReadiumSpec_cxx {
    return Unmanaged<HybridNitroReadiumSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<margelo::nitro::nitroreadium::HybridNitroReadiumSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_margelo__nitro__nitroreadium__HybridNitroReadiumSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_margelo__nitro__nitroreadium__HybridNitroReadiumSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_margelo__nitro__nitroreadium__HybridNitroReadiumSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  // Properties
  public final var nitroSource: NitroFileSource {
    @inline(__always)
    get {
      return self.__implementation.nitroSource
    }
    @inline(__always)
    set {
      self.__implementation.nitroSource = newValue
    }
  }
  
  public final var locator: bridge.std__optional_Locator_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_Locator_ in
        if let __unwrappedValue = self.__implementation.locator {
          return bridge.create_std__optional_Locator_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.locator = { () -> Locator? in
        if let __unwrapped = newValue.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var preferences: bridge.std__optional_EpubPreferences_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_EpubPreferences_ in
        if let __unwrappedValue = self.__implementation.preferences {
          return bridge.create_std__optional_EpubPreferences_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.preferences = { () -> EpubPreferences? in
        if let __unwrapped = newValue.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var decorations: bridge.std__optional_std__vector_Decoration__ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__vector_Decoration__ in
        if let __unwrappedValue = self.__implementation.decorations {
          return bridge.create_std__optional_std__vector_Decoration__({ () -> bridge.std__vector_Decoration_ in
            var __vector = bridge.create_std__vector_Decoration_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(__item)
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.decorations = { () -> [Decoration]? in
        if let __unwrapped = newValue.value {
          return __unwrapped.map({ __item in __item })
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var injectedJavascriptOnResourcesLoad: bridge.std__optional_std__string_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = self.__implementation.injectedJavascriptOnResourcesLoad {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.injectedJavascriptOnResourcesLoad = { () -> String? in
        if let __unwrapped = newValue.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var injectedJavascriptOnPageLoad: bridge.std__optional_std__string_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = self.__implementation.injectedJavascriptOnPageLoad {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.injectedJavascriptOnPageLoad = { () -> String? in
        if let __unwrapped = newValue.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var turnPageOnTap: bridge.std__optional_bool_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = self.__implementation.turnPageOnTap {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.turnPageOnTap = newValue.value
    }
  }
  
  public final var onLocatorChanged: bridge.std__optional_std__function_void_const_Locator_____locator______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_const_Locator_____locator______ in
        if let __unwrappedValue = self.__implementation.onLocatorChanged {
          return bridge.create_std__optional_std__function_void_const_Locator_____locator______({ () -> bridge.Func_void_Locator in
            let __closureWrapper = Func_void_Locator(__unwrappedValue)
            return bridge.create_Func_void_Locator(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onLocatorChanged = { () -> ((_ locator: Locator) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (Locator) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_Locator(__unwrapped)
            return { (__locator: Locator) -> Void in
              __wrappedFunction.call(__locator)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onSelection: bridge.std__optional_std__function_void_const_std__optional_Selection______selection______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_const_std__optional_Selection______selection______ in
        if let __unwrappedValue = self.__implementation.onSelection {
          return bridge.create_std__optional_std__function_void_const_std__optional_Selection______selection______({ () -> bridge.Func_void_std__optional_Selection_ in
            let __closureWrapper = Func_void_std__optional_Selection_(__unwrappedValue)
            return bridge.create_Func_void_std__optional_Selection_(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onSelection = { () -> ((_ selection: Selection?) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (Selection?) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_std__optional_Selection_(__unwrapped)
            return { (__selection: Selection?) -> Void in
              __wrappedFunction.call({ () -> bridge.std__optional_Selection_ in
                if let __unwrappedValue = __selection {
                  return bridge.create_std__optional_Selection_(__unwrappedValue)
                } else {
                  return .init()
                }
              }())
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onDecorationActivated: bridge.std__optional_std__function_void_const_DecorationActivatedEvent_____event______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_const_DecorationActivatedEvent_____event______ in
        if let __unwrappedValue = self.__implementation.onDecorationActivated {
          return bridge.create_std__optional_std__function_void_const_DecorationActivatedEvent_____event______({ () -> bridge.Func_void_DecorationActivatedEvent in
            let __closureWrapper = Func_void_DecorationActivatedEvent(__unwrappedValue)
            return bridge.create_Func_void_DecorationActivatedEvent(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onDecorationActivated = { () -> ((_ event: DecorationActivatedEvent) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (DecorationActivatedEvent) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_DecorationActivatedEvent(__unwrapped)
            return { (__event: DecorationActivatedEvent) -> Void in
              __wrappedFunction.call(__event)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onTap: bridge.std__optional_std__function_void_const_TapEvent_____event______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_const_TapEvent_____event______ in
        if let __unwrappedValue = self.__implementation.onTap {
          return bridge.create_std__optional_std__function_void_const_TapEvent_____event______({ () -> bridge.Func_void_TapEvent in
            let __closureWrapper = Func_void_TapEvent(__unwrappedValue)
            return bridge.create_Func_void_TapEvent(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onTap = { () -> ((_ event: TapEvent) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (TapEvent) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_TapEvent(__unwrapped)
            return { (__event: TapEvent) -> Void in
              __wrappedFunction.call(__event)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onDrag: bridge.std__optional_std__function_void_const_DragEvent_____event______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_const_DragEvent_____event______ in
        if let __unwrappedValue = self.__implementation.onDrag {
          return bridge.create_std__optional_std__function_void_const_DragEvent_____event______({ () -> bridge.Func_void_DragEvent in
            let __closureWrapper = Func_void_DragEvent(__unwrappedValue)
            return bridge.create_Func_void_DragEvent(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onDrag = { () -> ((_ event: DragEvent) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (DragEvent) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_DragEvent(__unwrapped)
            return { (__event: DragEvent) -> Void in
              __wrappedFunction.call(__event)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onPageChanged: bridge.std__optional_std__function_void_double____page_____double____totalPages_____const_Locator_____locator______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_double____page_____double____totalPages_____const_Locator_____locator______ in
        if let __unwrappedValue = self.__implementation.onPageChanged {
          return bridge.create_std__optional_std__function_void_double____page_____double____totalPages_____const_Locator_____locator______({ () -> bridge.Func_void_double_double_Locator in
            let __closureWrapper = Func_void_double_double_Locator(__unwrappedValue)
            return bridge.create_Func_void_double_double_Locator(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onPageChanged = { () -> ((_ page: Double, _ totalPages: Double, _ locator: Locator) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (Double, Double, Locator) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_double_double_Locator(__unwrapped)
            return { (__page: Double, __totalPages: Double, __locator: Locator) -> Void in
              __wrappedFunction.call(__page, __totalPages, __locator)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onPageLoaded: bridge.std__optional_std__function_void____ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void____ in
        if let __unwrappedValue = self.__implementation.onPageLoaded {
          return bridge.create_std__optional_std__function_void____({ () -> bridge.Func_void in
            let __closureWrapper = Func_void(__unwrappedValue)
            return bridge.create_Func_void(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onPageLoaded = { () -> (() -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> () -> Void in
            let __wrappedFunction = bridge.wrap_Func_void(__unwrapped)
            return { () -> Void in
              __wrappedFunction.call()
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onPreferencesChanged: bridge.std__optional_std__function_void_const_EpubPreferences_____preferences______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_const_EpubPreferences_____preferences______ in
        if let __unwrappedValue = self.__implementation.onPreferencesChanged {
          return bridge.create_std__optional_std__function_void_const_EpubPreferences_____preferences______({ () -> bridge.Func_void_EpubPreferences in
            let __closureWrapper = Func_void_EpubPreferences(__unwrappedValue)
            return bridge.create_Func_void_EpubPreferences(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onPreferencesChanged = { () -> ((_ preferences: EpubPreferences) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (EpubPreferences) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_EpubPreferences(__unwrapped)
            return { (__preferences: EpubPreferences) -> Void in
              __wrappedFunction.call(__preferences)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onMessage: bridge.std__optional_std__function_void_const_std__string_____message______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_const_std__string_____message______ in
        if let __unwrappedValue = self.__implementation.onMessage {
          return bridge.create_std__optional_std__function_void_const_std__string_____message______({ () -> bridge.Func_void_std__string in
            let __closureWrapper = Func_void_std__string(__unwrappedValue)
            return bridge.create_Func_void_std__string(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onMessage = { () -> ((_ message: String) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (String) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_std__string(__unwrapped)
            return { (__message: String) -> Void in
              __wrappedFunction.call(std.string(__message))
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }

  // Methods
  @inline(__always)
  public final func evaluateJavascript(script: std.string) -> bridge.Result_std__shared_ptr_Promise_std__optional_std__string____ {
    do {
      let __result = try self.__implementation.evaluateJavascript(script: String(script))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__optional_std__string___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__optional_std__string___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__optional_std__string___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__optional_std__string_ in
              if let __unwrappedValue = __result {
                return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
              } else {
                return .init()
              }
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_std__string____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_std__string____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func injectJavascript(script: std.string) -> bridge.Result_void_ {
    do {
      try self.__implementation.injectJavascript(script: String(script))
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func go(locator: Locator) -> bridge.Result_void_ {
    do {
      try self.__implementation.go(locator: locator)
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func clearSelection() -> bridge.Result_void_ {
    do {
      try self.__implementation.clearSelection()
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getSettings() -> bridge.Result_EpubPreferences_ {
    do {
      let __result = try self.__implementation.getSettings()
      let __resultCpp = __result
      return bridge.create_Result_EpubPreferences_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_EpubPreferences_(__exceptionPtr)
    }
  }
  
  public final func getView() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(__implementation.view).toOpaque()
  }
  
  public final func beforeUpdate() {
    __implementation.beforeUpdate()
  }
  
  public final func afterUpdate() {
    __implementation.afterUpdate()
  }
}
