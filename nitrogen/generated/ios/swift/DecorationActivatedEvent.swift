///
/// DecorationActivatedEvent.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `DecorationActivatedEvent`, backed by a C++ struct.
 */
public typealias DecorationActivatedEvent = margelo.nitro.nitroreadium.DecorationActivatedEvent

public extension DecorationActivatedEvent {
  private typealias bridge = margelo.nitro.nitroreadium.bridge.swift

  /**
   * Create a new instance of `DecorationActivatedEvent`.
   */
  init(decoration: Decoration, group: String, rect: Rect?, point: Point?) {
    self.init(decoration, std.string(group), { () -> bridge.std__optional_Rect_ in
      if let __unwrappedValue = rect {
        return bridge.create_std__optional_Rect_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_Point_ in
      if let __unwrappedValue = point {
        return bridge.create_std__optional_Point_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var decoration: Decoration {
    @inline(__always)
    get {
      return self.__decoration
    }
    @inline(__always)
    set {
      self.__decoration = newValue
    }
  }
  
  var group: String {
    @inline(__always)
    get {
      return String(self.__group)
    }
    @inline(__always)
    set {
      self.__group = std.string(newValue)
    }
  }
  
  var rect: Rect? {
    @inline(__always)
    get {
      return { () -> Rect? in
        if let __unwrapped = self.__rect.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__rect = { () -> bridge.std__optional_Rect_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_Rect_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var point: Point? {
    @inline(__always)
    get {
      return { () -> Point? in
        if let __unwrapped = self.__point.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__point = { () -> bridge.std__optional_Point_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_Point_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
