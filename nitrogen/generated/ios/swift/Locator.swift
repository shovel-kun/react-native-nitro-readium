///
/// Locator.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `Locator`, backed by a C++ struct.
 */
public typealias Locator = margelo.nitro.nitroreadium.Locator

public extension Locator {
  private typealias bridge = margelo.nitro.nitroreadium.bridge.swift

  /**
   * Create a new instance of `Locator`.
   */
  init(href: String, type: String, title: String?, locations: Locations?, text: TextObject?) {
    self.init(std.string(href), std.string(type), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = title {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_Locations_ in
      if let __unwrappedValue = locations {
        return bridge.create_std__optional_Locations_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_TextObject_ in
      if let __unwrappedValue = text {
        return bridge.create_std__optional_TextObject_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var href: String {
    @inline(__always)
    get {
      return String(self.__href)
    }
    @inline(__always)
    set {
      self.__href = std.string(newValue)
    }
  }
  
  var type: String {
    @inline(__always)
    get {
      return String(self.__type)
    }
    @inline(__always)
    set {
      self.__type = std.string(newValue)
    }
  }
  
  var title: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__title.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__title = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var locations: Locations? {
    @inline(__always)
    get {
      return { () -> Locations? in
        if let __unwrapped = self.__locations.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__locations = { () -> bridge.std__optional_Locations_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_Locations_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var text: TextObject? {
    @inline(__always)
    get {
      return { () -> TextObject? in
        if let __unwrapped = self.__text.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__text = { () -> bridge.std__optional_TextObject_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_TextObject_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
