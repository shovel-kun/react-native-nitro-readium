///
/// HybridNitroReadiumSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroReadiumSpec``
public protocol HybridNitroReadiumSpec_protocol: HybridObject, HybridView {
  // Properties
  var nitroSource: NitroFileSource { get set }
  var locator: Locator? { get set }
  var preferences: EpubPreferences? { get set }
  var decorations: [Decoration]? { get set }
  var injectedJavascriptOnResourcesLoad: String? { get set }
  var injectedJavascriptOnPageLoad: String? { get set }
  var onLocatorChanged: ((_ locator: Locator) -> Void)? { get set }
  var onSelection: ((_ selection: Selection?) -> Void)? { get set }
  var onDecorationActivated: ((_ event: DecorationActivatedEvent) -> Void)? { get set }
  var onTap: ((_ event: TapEvent) -> Void)? { get set }
  var onDrag: ((_ event: DragEvent) -> Void)? { get set }
  var onPageChanged: ((_ page: Double, _ totalPages: Double, _ locator: Locator) -> Void)? { get set }
  var onPageLoaded: (() -> Void)? { get set }
  var onPreferencesChanged: ((_ preferences: EpubPreferences) -> Void)? { get set }
  var onMessage: ((_ message: String) -> Void)? { get set }

  // Methods
  func evaluateJavascript(script: String) throws -> Promise<String?>
  func injectJavascript(script: String) throws -> Void
  func go(locator: Locator) throws -> Void
  func clearSelection() throws -> Void
  func getSettings() throws -> EpubPreferences
}

/// See ``HybridNitroReadiumSpec``
public class HybridNitroReadiumSpec_base {
  private weak var cxxWrapper: HybridNitroReadiumSpec_cxx? = nil
  public func getCxxWrapper() -> HybridNitroReadiumSpec_cxx {
  #if DEBUG
    guard self is HybridNitroReadiumSpec else {
      fatalError("`self` is not a `HybridNitroReadiumSpec`! Did you accidentally inherit from `HybridNitroReadiumSpec_base` instead of `HybridNitroReadiumSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroReadiumSpec_cxx(self as! HybridNitroReadiumSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroReadium HybridObject.
 * Implement this protocol to create Swift-based instances of NitroReadium.
 * ```swift
 * class HybridNitroReadium : HybridNitroReadiumSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroReadiumSpec = HybridNitroReadiumSpec_protocol & HybridNitroReadiumSpec_base
