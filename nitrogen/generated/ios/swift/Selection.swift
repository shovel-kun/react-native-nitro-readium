///
/// Selection.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `Selection`, backed by a C++ struct.
 */
public typealias Selection = margelo.nitro.nitroreadium.Selection

public extension Selection {
  private typealias bridge = margelo.nitro.nitroreadium.bridge.swift

  /**
   * Create a new instance of `Selection`.
   */
  init(locator: Locator, rect: Rect?) {
    self.init(locator, { () -> bridge.std__optional_Rect_ in
      if let __unwrappedValue = rect {
        return bridge.create_std__optional_Rect_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var locator: Locator {
    @inline(__always)
    get {
      return self.__locator
    }
    @inline(__always)
    set {
      self.__locator = newValue
    }
  }
  
  var rect: Rect? {
    @inline(__always)
    get {
      return { () -> Rect? in
        if let __unwrapped = self.__rect.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__rect = { () -> bridge.std__optional_Rect_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_Rect_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
