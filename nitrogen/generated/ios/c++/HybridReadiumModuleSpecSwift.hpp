///
/// HybridReadiumModuleSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridReadiumModuleSpec.hpp"

// Forward declaration of `HybridReadiumModuleSpec_cxx` to properly resolve imports.
namespace NitroReadium { class HybridReadiumModuleSpec_cxx; }

// Forward declaration of `HybridPublicationSpec` to properly resolve imports.
namespace margelo::nitro::nitroreadium { class HybridPublicationSpec; }

#include <NitroModules/Promise.hpp>
#include <memory>
#include "HybridPublicationSpec.hpp"
#include <string>

#include "NitroReadium-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitroreadium {

  /**
   * The C++ part of HybridReadiumModuleSpec_cxx.swift.
   *
   * HybridReadiumModuleSpecSwift (C++) accesses HybridReadiumModuleSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridReadiumModuleSpec_cxx can directly inherit from the C++ class HybridReadiumModuleSpec
   * to simplify the whole structure and memory management.
   */
  class HybridReadiumModuleSpecSwift: public virtual HybridReadiumModuleSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridReadiumModuleSpecSwift(const NitroReadium::HybridReadiumModuleSpec_cxx& swiftPart):
      HybridObject(HybridReadiumModuleSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroReadium::HybridReadiumModuleSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline double add(double a, double b) override {
      auto __result = _swiftPart.add(std::forward<decltype(a)>(a), std::forward<decltype(b)>(b));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::shared_ptr<margelo::nitro::nitroreadium::HybridPublicationSpec>>> openPublication(const std::string& absoluteUrl) override {
      auto __result = _swiftPart.openPublication(absoluteUrl);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroReadium::HybridReadiumModuleSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitroreadium
