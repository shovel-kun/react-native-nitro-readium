///
/// HybridPublicationSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridPublicationSpec.hpp"

// Forward declaration of `HybridPublicationSpec_cxx` to properly resolve imports.
namespace NitroReadium { class HybridPublicationSpec_cxx; }

// Forward declaration of `Locator` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Locator; }
// Forward declaration of `Locations` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Locations; }
// Forward declaration of `TextObject` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct TextObject; }

#include <string>
#include <NitroModules/Promise.hpp>
#include <optional>
#include "Locator.hpp"
#include "Locations.hpp"
#include <vector>
#include "TextObject.hpp"

#include "NitroReadium-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitroreadium {

  /**
   * The C++ part of HybridPublicationSpec_cxx.swift.
   *
   * HybridPublicationSpecSwift (C++) accesses HybridPublicationSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridPublicationSpec_cxx can directly inherit from the C++ class HybridPublicationSpec
   * to simplify the whole structure and memory management.
   */
  class HybridPublicationSpecSwift: public virtual HybridPublicationSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridPublicationSpecSwift(const NitroReadium::HybridPublicationSpec_cxx& swiftPart):
      HybridObject(HybridPublicationSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroReadium::HybridPublicationSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline std::string getManifest() noexcept override {
      auto __result = _swiftPart.getManifest();
      return __result;
    }
    inline void setManifest(const std::string& manifest) noexcept override {
      _swiftPart.setManifest(manifest);
    }
    inline std::string getMetadata() noexcept override {
      auto __result = _swiftPart.getMetadata();
      return __result;
    }
    inline void setMetadata(const std::string& metadata) noexcept override {
      _swiftPart.setMetadata(metadata);
    }
    inline std::string getTableOfContents() noexcept override {
      auto __result = _swiftPart.getTableOfContents();
      return __result;
    }
    inline void setTableOfContents(const std::string& tableOfContents) noexcept override {
      _swiftPart.setTableOfContents(tableOfContents);
    }
    inline std::string getImages() noexcept override {
      auto __result = _swiftPart.getImages();
      return __result;
    }
    inline void setImages(const std::string& images) noexcept override {
      _swiftPart.setImages(images);
    }

  public:
    // Methods
    inline std::shared_ptr<Promise<std::string>> cover() override {
      auto __result = _swiftPart.cover();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::optional<Locator> locatorFromLink(const std::string& link) override {
      auto __result = _swiftPart.locatorFromLink(link);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<Locator>>> locate(const Locator& locator) override {
      auto __result = _swiftPart.locate(locator);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<Locator>>> locateProgression(double progression) override {
      auto __result = _swiftPart.locateProgression(std::forward<decltype(progression)>(progression));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroReadium::HybridPublicationSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitroreadium
