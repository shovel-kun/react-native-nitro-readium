///
/// HybridNitroReadiumSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroReadiumSpec.hpp"

// Forward declaration of `HybridNitroReadiumSpec_cxx` to properly resolve imports.
namespace NitroReadium { class HybridNitroReadiumSpec_cxx; }

// Forward declaration of `NitroFileSource` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct NitroFileSource; }
// Forward declaration of `Locator` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Locator; }
// Forward declaration of `Locations` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Locations; }
// Forward declaration of `TextObject` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct TextObject; }
// Forward declaration of `EpubPreferences` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct EpubPreferences; }
// Forward declaration of `ColumnCount` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class ColumnCount; }
// Forward declaration of `ImageFilter` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class ImageFilter; }
// Forward declaration of `ReadingProgression` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class ReadingProgression; }
// Forward declaration of `Spread` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class Spread; }
// Forward declaration of `TextAlign` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class TextAlign; }
// Forward declaration of `Theme` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class Theme; }
// Forward declaration of `Decoration` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Decoration; }
// Forward declaration of `DecorationStyle` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct DecorationStyle; }
// Forward declaration of `DecorationType` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class DecorationType; }
// Forward declaration of `Selection` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Selection; }
// Forward declaration of `Rect` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Rect; }
// Forward declaration of `DecorationActivatedEvent` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct DecorationActivatedEvent; }
// Forward declaration of `Point` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Point; }
// Forward declaration of `TapEvent` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct TapEvent; }
// Forward declaration of `DragEvent` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct DragEvent; }
// Forward declaration of `DragEventType` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class DragEventType; }

#include "NitroFileSource.hpp"
#include <string>
#include <optional>
#include "Locator.hpp"
#include "Locations.hpp"
#include <vector>
#include "TextObject.hpp"
#include "EpubPreferences.hpp"
#include "ColumnCount.hpp"
#include "ImageFilter.hpp"
#include "ReadingProgression.hpp"
#include "Spread.hpp"
#include "TextAlign.hpp"
#include "Theme.hpp"
#include "Decoration.hpp"
#include "DecorationStyle.hpp"
#include "DecorationType.hpp"
#include <functional>
#include "Selection.hpp"
#include "Rect.hpp"
#include "DecorationActivatedEvent.hpp"
#include "Point.hpp"
#include "TapEvent.hpp"
#include "DragEvent.hpp"
#include "DragEventType.hpp"
#include <NitroModules/Promise.hpp>

#include "NitroReadium-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitroreadium {

  /**
   * The C++ part of HybridNitroReadiumSpec_cxx.swift.
   *
   * HybridNitroReadiumSpecSwift (C++) accesses HybridNitroReadiumSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroReadiumSpec_cxx can directly inherit from the C++ class HybridNitroReadiumSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroReadiumSpecSwift: public virtual HybridNitroReadiumSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroReadiumSpecSwift(const NitroReadium::HybridNitroReadiumSpec_cxx& swiftPart):
      HybridObject(HybridNitroReadiumSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroReadium::HybridNitroReadiumSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline NitroFileSource getNitroSource() noexcept override {
      auto __result = _swiftPart.getNitroSource();
      return __result;
    }
    inline void setNitroSource(const NitroFileSource& nitroSource) noexcept override {
      _swiftPart.setNitroSource(nitroSource);
    }
    inline std::optional<Locator> getLocator() noexcept override {
      auto __result = _swiftPart.getLocator();
      return __result;
    }
    inline void setLocator(const std::optional<Locator>& locator) noexcept override {
      _swiftPart.setLocator(locator);
    }
    inline std::optional<EpubPreferences> getPreferences() noexcept override {
      auto __result = _swiftPart.getPreferences();
      return __result;
    }
    inline void setPreferences(const std::optional<EpubPreferences>& preferences) noexcept override {
      _swiftPart.setPreferences(preferences);
    }
    inline std::optional<std::vector<Decoration>> getDecorations() noexcept override {
      auto __result = _swiftPart.getDecorations();
      return __result;
    }
    inline void setDecorations(const std::optional<std::vector<Decoration>>& decorations) noexcept override {
      _swiftPart.setDecorations(decorations);
    }
    inline std::optional<std::string> getInjectedJavascriptOnResourcesLoad() noexcept override {
      auto __result = _swiftPart.getInjectedJavascriptOnResourcesLoad();
      return __result;
    }
    inline void setInjectedJavascriptOnResourcesLoad(const std::optional<std::string>& injectedJavascriptOnResourcesLoad) noexcept override {
      _swiftPart.setInjectedJavascriptOnResourcesLoad(injectedJavascriptOnResourcesLoad);
    }
    inline std::optional<std::string> getInjectedJavascriptOnPageLoad() noexcept override {
      auto __result = _swiftPart.getInjectedJavascriptOnPageLoad();
      return __result;
    }
    inline void setInjectedJavascriptOnPageLoad(const std::optional<std::string>& injectedJavascriptOnPageLoad) noexcept override {
      _swiftPart.setInjectedJavascriptOnPageLoad(injectedJavascriptOnPageLoad);
    }
    inline std::optional<std::function<void(const Locator& /* locator */)>> getOnLocatorChanged() noexcept override {
      auto __result = _swiftPart.getOnLocatorChanged();
      return __result;
    }
    inline void setOnLocatorChanged(const std::optional<std::function<void(const Locator& /* locator */)>>& onLocatorChanged) noexcept override {
      _swiftPart.setOnLocatorChanged(onLocatorChanged);
    }
    inline std::optional<std::function<void(const std::optional<Selection>& /* selection */)>> getOnSelection() noexcept override {
      auto __result = _swiftPart.getOnSelection();
      return __result;
    }
    inline void setOnSelection(const std::optional<std::function<void(const std::optional<Selection>& /* selection */)>>& onSelection) noexcept override {
      _swiftPart.setOnSelection(onSelection);
    }
    inline std::optional<std::function<void(const DecorationActivatedEvent& /* event */)>> getOnDecorationActivated() noexcept override {
      auto __result = _swiftPart.getOnDecorationActivated();
      return __result;
    }
    inline void setOnDecorationActivated(const std::optional<std::function<void(const DecorationActivatedEvent& /* event */)>>& onDecorationActivated) noexcept override {
      _swiftPart.setOnDecorationActivated(onDecorationActivated);
    }
    inline std::optional<std::function<void(const TapEvent& /* event */)>> getOnTap() noexcept override {
      auto __result = _swiftPart.getOnTap();
      return __result;
    }
    inline void setOnTap(const std::optional<std::function<void(const TapEvent& /* event */)>>& onTap) noexcept override {
      _swiftPart.setOnTap(onTap);
    }
    inline std::optional<std::function<void(const DragEvent& /* event */)>> getOnDrag() noexcept override {
      auto __result = _swiftPart.getOnDrag();
      return __result;
    }
    inline void setOnDrag(const std::optional<std::function<void(const DragEvent& /* event */)>>& onDrag) noexcept override {
      _swiftPart.setOnDrag(onDrag);
    }
    inline std::optional<std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>> getOnPageChanged() noexcept override {
      auto __result = _swiftPart.getOnPageChanged();
      return __result;
    }
    inline void setOnPageChanged(const std::optional<std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>>& onPageChanged) noexcept override {
      _swiftPart.setOnPageChanged(onPageChanged);
    }
    inline std::optional<std::function<void()>> getOnPageLoaded() noexcept override {
      auto __result = _swiftPart.getOnPageLoaded();
      return __result;
    }
    inline void setOnPageLoaded(const std::optional<std::function<void()>>& onPageLoaded) noexcept override {
      _swiftPart.setOnPageLoaded(onPageLoaded);
    }
    inline std::optional<std::function<void(const std::string& /* message */)>> getOnMessage() noexcept override {
      auto __result = _swiftPart.getOnMessage();
      return __result;
    }
    inline void setOnMessage(const std::optional<std::function<void(const std::string& /* message */)>>& onMessage) noexcept override {
      _swiftPart.setOnMessage(onMessage);
    }

  public:
    // Methods
    inline std::shared_ptr<Promise<std::optional<std::string>>> evaluateJavascript(const std::string& script) override {
      auto __result = _swiftPart.evaluateJavascript(script);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void injectJavascript(const std::string& script) override {
      auto __result = _swiftPart.injectJavascript(script);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void go(const Locator& locator) override {
      auto __result = _swiftPart.go(locator);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void clearSelection() override {
      auto __result = _swiftPart.clearSelection();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroReadium::HybridNitroReadiumSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitroreadium
