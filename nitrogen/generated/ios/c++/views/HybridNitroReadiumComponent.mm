///
/// HybridNitroReadiumComponent.mm
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#import "HybridNitroReadiumComponent.hpp"
#import <memory>
#import <react/renderer/componentregistry/ComponentDescriptorProvider.h>
#import <React/RCTViewComponentView.h>
#import <React/RCTComponentViewFactory.h>
#import <React/UIView+ComponentViewProtocol.h>
#import <NitroModules/NitroDefines.hpp>
#import <UIKit/UIKit.h>

#import "HybridNitroReadiumSpecSwift.hpp"
#import "NitroReadium-Swift-Cxx-Umbrella.hpp"

using namespace facebook;
using namespace margelo::nitro::nitroreadium;
using namespace margelo::nitro::nitroreadium::views;

/**
 * Represents the React Native View holder for the Nitro "NitroReadium" HybridView.
 */
@interface HybridNitroReadiumComponent: RCTViewComponentView
@end

@implementation HybridNitroReadiumComponent {
  std::shared_ptr<HybridNitroReadiumSpecSwift> _hybridView;
}

+ (void) load {
  [super load];
  [RCTComponentViewFactory.currentComponentViewFactory registerComponentViewClass:[HybridNitroReadiumComponent class]];
}

+ (react::ComponentDescriptorProvider) componentDescriptorProvider {
  return react::concreteComponentDescriptorProvider<HybridNitroReadiumComponentDescriptor>();
}

- (instancetype) init {
  if (self = [super init]) {
    std::shared_ptr<HybridNitroReadiumSpec> hybridView = NitroReadium::NitroReadiumAutolinking::createNitroReadium();
    _hybridView = std::dynamic_pointer_cast<HybridNitroReadiumSpecSwift>(hybridView);
    [self updateView];
  }
  return self;
}

- (void) updateView {
  // 1. Get Swift part
  NitroReadium::HybridNitroReadiumSpec_cxx& swiftPart = _hybridView->getSwiftPart();

  // 2. Get UIView*
  void* viewUnsafe = swiftPart.getView();
  UIView* view = (__bridge_transfer UIView*) viewUnsafe;

  // 3. Update RCTViewComponentView's [contentView]
  [self setContentView:view];
}

- (void) updateProps:(const react::Props::Shared&)props
            oldProps:(const react::Props::Shared&)oldProps {
  // 1. Downcast props
  const auto& newViewPropsConst = *std::static_pointer_cast<HybridNitroReadiumProps const>(props);
  auto& newViewProps = const_cast<HybridNitroReadiumProps&>(newViewPropsConst);
  NitroReadium::HybridNitroReadiumSpec_cxx& swiftPart = _hybridView->getSwiftPart();

  // 2. Update each prop individually
  swiftPart.beforeUpdate();

  // absolutePath: optional
  if (newViewProps.absolutePath.isDirty) {
    swiftPart.setAbsolutePath(newViewProps.absolutePath.value);
    newViewProps.absolutePath.isDirty = false;
  }
  // locator: optional
  if (newViewProps.locator.isDirty) {
    swiftPart.setLocator(newViewProps.locator.value);
    newViewProps.locator.isDirty = false;
  }
  // preferences: optional
  if (newViewProps.preferences.isDirty) {
    swiftPart.setPreferences(newViewProps.preferences.value);
    newViewProps.preferences.isDirty = false;
  }
  // decorations: optional
  if (newViewProps.decorations.isDirty) {
    swiftPart.setDecorations(newViewProps.decorations.value);
    newViewProps.decorations.isDirty = false;
  }
  // injectedJavascriptOnResourcesLoad: optional
  if (newViewProps.injectedJavascriptOnResourcesLoad.isDirty) {
    swiftPart.setInjectedJavascriptOnResourcesLoad(newViewProps.injectedJavascriptOnResourcesLoad.value);
    newViewProps.injectedJavascriptOnResourcesLoad.isDirty = false;
  }
  // injectedJavascriptOnPageLoad: optional
  if (newViewProps.injectedJavascriptOnPageLoad.isDirty) {
    swiftPart.setInjectedJavascriptOnPageLoad(newViewProps.injectedJavascriptOnPageLoad.value);
    newViewProps.injectedJavascriptOnPageLoad.isDirty = false;
  }
  // onLocatorChanged: optional
  if (newViewProps.onLocatorChanged.isDirty) {
    swiftPart.setOnLocatorChanged(newViewProps.onLocatorChanged.value);
    newViewProps.onLocatorChanged.isDirty = false;
  }
  // onSelection: optional
  if (newViewProps.onSelection.isDirty) {
    swiftPart.setOnSelection(newViewProps.onSelection.value);
    newViewProps.onSelection.isDirty = false;
  }
  // onDecorationActivated: optional
  if (newViewProps.onDecorationActivated.isDirty) {
    swiftPart.setOnDecorationActivated(newViewProps.onDecorationActivated.value);
    newViewProps.onDecorationActivated.isDirty = false;
  }
  // onTap: optional
  if (newViewProps.onTap.isDirty) {
    swiftPart.setOnTap(newViewProps.onTap.value);
    newViewProps.onTap.isDirty = false;
  }
  // onDrag: optional
  if (newViewProps.onDrag.isDirty) {
    swiftPart.setOnDrag(newViewProps.onDrag.value);
    newViewProps.onDrag.isDirty = false;
  }
  // onPageChanged: optional
  if (newViewProps.onPageChanged.isDirty) {
    swiftPart.setOnPageChanged(newViewProps.onPageChanged.value);
    newViewProps.onPageChanged.isDirty = false;
  }
  // onPageLoaded: optional
  if (newViewProps.onPageLoaded.isDirty) {
    swiftPart.setOnPageLoaded(newViewProps.onPageLoaded.value);
    newViewProps.onPageLoaded.isDirty = false;
  }
  // onMessage: optional
  if (newViewProps.onMessage.isDirty) {
    swiftPart.setOnMessage(newViewProps.onMessage.value);
    newViewProps.onMessage.isDirty = false;
  }

  swiftPart.afterUpdate();

  // 3. Update hybridRef if it changed
  if (newViewProps.hybridRef.isDirty) {
    // hybridRef changed - call it with new this
    const auto& maybeFunc = newViewProps.hybridRef.value;
    if (maybeFunc.has_value()) {
      maybeFunc.value()(_hybridView);
    }
    newViewProps.hybridRef.isDirty = false;
  }

  // 4. Continue in base class
  [super updateProps:props oldProps:oldProps];
}

@end
