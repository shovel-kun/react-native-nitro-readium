///
/// NitroReadium-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `ColumnCount` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class ColumnCount; }
// Forward declaration of `DecorationActivatedEvent` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct DecorationActivatedEvent; }
// Forward declaration of `DecorationStyle` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct DecorationStyle; }
// Forward declaration of `DecorationType` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class DecorationType; }
// Forward declaration of `Decoration` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Decoration; }
// Forward declaration of `DragEventType` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class DragEventType; }
// Forward declaration of `DragEvent` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct DragEvent; }
// Forward declaration of `EpubPreferences` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct EpubPreferences; }
// Forward declaration of `HybridNitroReadiumSpec` to properly resolve imports.
namespace margelo::nitro::nitroreadium { class HybridNitroReadiumSpec; }
// Forward declaration of `HybridReadiumModuleSpec` to properly resolve imports.
namespace margelo::nitro::nitroreadium { class HybridReadiumModuleSpec; }
// Forward declaration of `ImageFilter` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class ImageFilter; }
// Forward declaration of `Locations` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Locations; }
// Forward declaration of `Locator` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Locator; }
// Forward declaration of `Point` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Point; }
// Forward declaration of `ReadingProgression` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class ReadingProgression; }
// Forward declaration of `Rect` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Rect; }
// Forward declaration of `Selection` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct Selection; }
// Forward declaration of `Spread` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class Spread; }
// Forward declaration of `TapEvent` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct TapEvent; }
// Forward declaration of `TextAlign` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class TextAlign; }
// Forward declaration of `TextObject` to properly resolve imports.
namespace margelo::nitro::nitroreadium { struct TextObject; }
// Forward declaration of `Theme` to properly resolve imports.
namespace margelo::nitro::nitroreadium { enum class Theme; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroReadiumSpec_cxx` to properly resolve imports.
namespace NitroReadium { class HybridNitroReadiumSpec_cxx; }
// Forward declaration of `HybridReadiumModuleSpec_cxx` to properly resolve imports.
namespace NitroReadium { class HybridReadiumModuleSpec_cxx; }

// Include C++ defined types
#include "ColumnCount.hpp"
#include "Decoration.hpp"
#include "DecorationActivatedEvent.hpp"
#include "DecorationStyle.hpp"
#include "DecorationType.hpp"
#include "DragEvent.hpp"
#include "DragEventType.hpp"
#include "EpubPreferences.hpp"
#include "HybridNitroReadiumSpec.hpp"
#include "HybridReadiumModuleSpec.hpp"
#include "ImageFilter.hpp"
#include "Locations.hpp"
#include "Locator.hpp"
#include "Point.hpp"
#include "ReadingProgression.hpp"
#include "Rect.hpp"
#include "Selection.hpp"
#include "Spread.hpp"
#include "TapEvent.hpp"
#include "TextAlign.hpp"
#include "TextObject.hpp"
#include "Theme.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitroreadium::bridge::swift {

  // pragma MARK: std::shared_ptr<Promise<std::string>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::string>>`.
   */
  using std__shared_ptr_Promise_std__string__ = std::shared_ptr<Promise<std::string>>;
  inline std::shared_ptr<Promise<std::string>> create_std__shared_ptr_Promise_std__string__() {
    return Promise<std::string>::create();
  }
  inline PromiseHolder<std::string> wrap_std__shared_ptr_Promise_std__string__(std::shared_ptr<Promise<std::string>> promise) {
    return PromiseHolder<std::string>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::string& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::string&)>`.
   */
  using Func_void_std__string = std::function<void(const std::string& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_Wrapper final {
  public:
    explicit Func_void_std__string_Wrapper(std::function<void(const std::string& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::string& /* result */)>>(std::move(func))) {}
    inline void call(std::string result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::string& /* result */)>> _function;
  };
  Func_void_std__string create_Func_void_std__string(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__string_Wrapper wrap_Func_void_std__string(Func_void_std__string value) {
    return Func_void_std__string_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_shared<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const {
      _function->operator()(error);
    }
  private:
    std::shared_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  };
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitroreadium::HybridReadiumModuleSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::nitroreadium::HybridReadiumModuleSpec>`.
   */
  using std__shared_ptr_margelo__nitro__nitroreadium__HybridReadiumModuleSpec_ = std::shared_ptr<margelo::nitro::nitroreadium::HybridReadiumModuleSpec>;
  std::shared_ptr<margelo::nitro::nitroreadium::HybridReadiumModuleSpec> create_std__shared_ptr_margelo__nitro__nitroreadium__HybridReadiumModuleSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitroreadium__HybridReadiumModuleSpec_(std__shared_ptr_margelo__nitro__nitroreadium__HybridReadiumModuleSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::nitroreadium::HybridReadiumModuleSpec>
  using std__weak_ptr_margelo__nitro__nitroreadium__HybridReadiumModuleSpec_ = std::weak_ptr<margelo::nitro::nitroreadium::HybridReadiumModuleSpec>;
  inline std__weak_ptr_margelo__nitro__nitroreadium__HybridReadiumModuleSpec_ weakify_std__shared_ptr_margelo__nitro__nitroreadium__HybridReadiumModuleSpec_(const std::shared_ptr<margelo::nitro::nitroreadium::HybridReadiumModuleSpec>& strong) { return strong; }
  
  // pragma MARK: Result<double>
  using Result_double_ = Result<double>;
  inline Result_double_ create_Result_double_(double value) {
    return Result<double>::withValue(std::move(value));
  }
  inline Result_double_ create_Result_double_(const std::exception_ptr& error) {
    return Result<double>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::string>>>
  using Result_std__shared_ptr_Promise_std__string___ = Result<std::shared_ptr<Promise<std::string>>>;
  inline Result_std__shared_ptr_Promise_std__string___ create_Result_std__shared_ptr_Promise_std__string___(const std::shared_ptr<Promise<std::string>>& value) {
    return Result<std::shared_ptr<Promise<std::string>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__string___ create_Result_std__shared_ptr_Promise_std__string___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::string>>>::withError(error);
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::vector<std::string>
  /**
   * Specialized version of `std::vector<std::string>`.
   */
  using std__vector_std__string_ = std::vector<std::string>;
  inline std::vector<std::string> create_std__vector_std__string_(size_t size) {
    std::vector<std::string> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::optional<std::vector<std::string>>
  /**
   * Specialized version of `std::optional<std::vector<std::string>>`.
   */
  using std__optional_std__vector_std__string__ = std::optional<std::vector<std::string>>;
  inline std::optional<std::vector<std::string>> create_std__optional_std__vector_std__string__(const std::vector<std::string>& value) {
    return std::optional<std::vector<std::string>>(value);
  }
  
  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) {
    return std::optional<double>(value);
  }
  
  // pragma MARK: std::optional<Locations>
  /**
   * Specialized version of `std::optional<Locations>`.
   */
  using std__optional_Locations_ = std::optional<Locations>;
  inline std::optional<Locations> create_std__optional_Locations_(const Locations& value) {
    return std::optional<Locations>(value);
  }
  
  // pragma MARK: std::optional<TextObject>
  /**
   * Specialized version of `std::optional<TextObject>`.
   */
  using std__optional_TextObject_ = std::optional<TextObject>;
  inline std::optional<TextObject> create_std__optional_TextObject_(const TextObject& value) {
    return std::optional<TextObject>(value);
  }
  
  // pragma MARK: std::optional<Locator>
  /**
   * Specialized version of `std::optional<Locator>`.
   */
  using std__optional_Locator_ = std::optional<Locator>;
  inline std::optional<Locator> create_std__optional_Locator_(const Locator& value) {
    return std::optional<Locator>(value);
  }
  
  // pragma MARK: std::optional<ColumnCount>
  /**
   * Specialized version of `std::optional<ColumnCount>`.
   */
  using std__optional_ColumnCount_ = std::optional<ColumnCount>;
  inline std::optional<ColumnCount> create_std__optional_ColumnCount_(const ColumnCount& value) {
    return std::optional<ColumnCount>(value);
  }
  
  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) {
    return std::optional<bool>(value);
  }
  
  // pragma MARK: std::optional<ImageFilter>
  /**
   * Specialized version of `std::optional<ImageFilter>`.
   */
  using std__optional_ImageFilter_ = std::optional<ImageFilter>;
  inline std::optional<ImageFilter> create_std__optional_ImageFilter_(const ImageFilter& value) {
    return std::optional<ImageFilter>(value);
  }
  
  // pragma MARK: std::optional<ReadingProgression>
  /**
   * Specialized version of `std::optional<ReadingProgression>`.
   */
  using std__optional_ReadingProgression_ = std::optional<ReadingProgression>;
  inline std::optional<ReadingProgression> create_std__optional_ReadingProgression_(const ReadingProgression& value) {
    return std::optional<ReadingProgression>(value);
  }
  
  // pragma MARK: std::optional<Spread>
  /**
   * Specialized version of `std::optional<Spread>`.
   */
  using std__optional_Spread_ = std::optional<Spread>;
  inline std::optional<Spread> create_std__optional_Spread_(const Spread& value) {
    return std::optional<Spread>(value);
  }
  
  // pragma MARK: std::optional<TextAlign>
  /**
   * Specialized version of `std::optional<TextAlign>`.
   */
  using std__optional_TextAlign_ = std::optional<TextAlign>;
  inline std::optional<TextAlign> create_std__optional_TextAlign_(const TextAlign& value) {
    return std::optional<TextAlign>(value);
  }
  
  // pragma MARK: std::optional<Theme>
  /**
   * Specialized version of `std::optional<Theme>`.
   */
  using std__optional_Theme_ = std::optional<Theme>;
  inline std::optional<Theme> create_std__optional_Theme_(const Theme& value) {
    return std::optional<Theme>(value);
  }
  
  // pragma MARK: std::optional<EpubPreferences>
  /**
   * Specialized version of `std::optional<EpubPreferences>`.
   */
  using std__optional_EpubPreferences_ = std::optional<EpubPreferences>;
  inline std::optional<EpubPreferences> create_std__optional_EpubPreferences_(const EpubPreferences& value) {
    return std::optional<EpubPreferences>(value);
  }
  
  // pragma MARK: std::vector<Decoration>
  /**
   * Specialized version of `std::vector<Decoration>`.
   */
  using std__vector_Decoration_ = std::vector<Decoration>;
  inline std::vector<Decoration> create_std__vector_Decoration_(size_t size) {
    std::vector<Decoration> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::optional<std::vector<Decoration>>
  /**
   * Specialized version of `std::optional<std::vector<Decoration>>`.
   */
  using std__optional_std__vector_Decoration__ = std::optional<std::vector<Decoration>>;
  inline std::optional<std::vector<Decoration>> create_std__optional_std__vector_Decoration__(const std::vector<Decoration>& value) {
    return std::optional<std::vector<Decoration>>(value);
  }
  
  // pragma MARK: std::function<void(const Locator& /* locator */)>
  /**
   * Specialized version of `std::function<void(const Locator&)>`.
   */
  using Func_void_Locator = std::function<void(const Locator& /* locator */)>;
  /**
   * Wrapper class for a `std::function<void(const Locator& / * locator * /)>`, this can be used from Swift.
   */
  class Func_void_Locator_Wrapper final {
  public:
    explicit Func_void_Locator_Wrapper(std::function<void(const Locator& /* locator */)>&& func): _function(std::make_shared<std::function<void(const Locator& /* locator */)>>(std::move(func))) {}
    inline void call(Locator locator) const {
      _function->operator()(locator);
    }
  private:
    std::shared_ptr<std::function<void(const Locator& /* locator */)>> _function;
  };
  Func_void_Locator create_Func_void_Locator(void* _Nonnull swiftClosureWrapper);
  inline Func_void_Locator_Wrapper wrap_Func_void_Locator(Func_void_Locator value) {
    return Func_void_Locator_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(const Locator& /* locator */)>>
  /**
   * Specialized version of `std::optional<std::function<void(const Locator& / * locator * /)>>`.
   */
  using std__optional_std__function_void_const_Locator_____locator______ = std::optional<std::function<void(const Locator& /* locator */)>>;
  inline std::optional<std::function<void(const Locator& /* locator */)>> create_std__optional_std__function_void_const_Locator_____locator______(const std::function<void(const Locator& /* locator */)>& value) {
    return std::optional<std::function<void(const Locator& /* locator */)>>(value);
  }
  
  // pragma MARK: std::optional<Rect>
  /**
   * Specialized version of `std::optional<Rect>`.
   */
  using std__optional_Rect_ = std::optional<Rect>;
  inline std::optional<Rect> create_std__optional_Rect_(const Rect& value) {
    return std::optional<Rect>(value);
  }
  
  // pragma MARK: std::optional<Selection>
  /**
   * Specialized version of `std::optional<Selection>`.
   */
  using std__optional_Selection_ = std::optional<Selection>;
  inline std::optional<Selection> create_std__optional_Selection_(const Selection& value) {
    return std::optional<Selection>(value);
  }
  
  // pragma MARK: std::function<void(const std::optional<Selection>& /* selection */)>
  /**
   * Specialized version of `std::function<void(const std::optional<Selection>&)>`.
   */
  using Func_void_std__optional_Selection_ = std::function<void(const std::optional<Selection>& /* selection */)>;
  /**
   * Wrapper class for a `std::function<void(const std::optional<Selection>& / * selection * /)>`, this can be used from Swift.
   */
  class Func_void_std__optional_Selection__Wrapper final {
  public:
    explicit Func_void_std__optional_Selection__Wrapper(std::function<void(const std::optional<Selection>& /* selection */)>&& func): _function(std::make_shared<std::function<void(const std::optional<Selection>& /* selection */)>>(std::move(func))) {}
    inline void call(std::optional<Selection> selection) const {
      _function->operator()(selection);
    }
  private:
    std::shared_ptr<std::function<void(const std::optional<Selection>& /* selection */)>> _function;
  };
  Func_void_std__optional_Selection_ create_Func_void_std__optional_Selection_(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__optional_Selection__Wrapper wrap_Func_void_std__optional_Selection_(Func_void_std__optional_Selection_ value) {
    return Func_void_std__optional_Selection__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(const std::optional<Selection>& /* selection */)>>
  /**
   * Specialized version of `std::optional<std::function<void(const std::optional<Selection>& / * selection * /)>>`.
   */
  using std__optional_std__function_void_const_std__optional_Selection______selection______ = std::optional<std::function<void(const std::optional<Selection>& /* selection */)>>;
  inline std::optional<std::function<void(const std::optional<Selection>& /* selection */)>> create_std__optional_std__function_void_const_std__optional_Selection______selection______(const std::function<void(const std::optional<Selection>& /* selection */)>& value) {
    return std::optional<std::function<void(const std::optional<Selection>& /* selection */)>>(value);
  }
  
  // pragma MARK: std::optional<Point>
  /**
   * Specialized version of `std::optional<Point>`.
   */
  using std__optional_Point_ = std::optional<Point>;
  inline std::optional<Point> create_std__optional_Point_(const Point& value) {
    return std::optional<Point>(value);
  }
  
  // pragma MARK: std::function<void(const DecorationActivatedEvent& /* event */)>
  /**
   * Specialized version of `std::function<void(const DecorationActivatedEvent&)>`.
   */
  using Func_void_DecorationActivatedEvent = std::function<void(const DecorationActivatedEvent& /* event */)>;
  /**
   * Wrapper class for a `std::function<void(const DecorationActivatedEvent& / * event * /)>`, this can be used from Swift.
   */
  class Func_void_DecorationActivatedEvent_Wrapper final {
  public:
    explicit Func_void_DecorationActivatedEvent_Wrapper(std::function<void(const DecorationActivatedEvent& /* event */)>&& func): _function(std::make_shared<std::function<void(const DecorationActivatedEvent& /* event */)>>(std::move(func))) {}
    inline void call(DecorationActivatedEvent event) const {
      _function->operator()(event);
    }
  private:
    std::shared_ptr<std::function<void(const DecorationActivatedEvent& /* event */)>> _function;
  };
  Func_void_DecorationActivatedEvent create_Func_void_DecorationActivatedEvent(void* _Nonnull swiftClosureWrapper);
  inline Func_void_DecorationActivatedEvent_Wrapper wrap_Func_void_DecorationActivatedEvent(Func_void_DecorationActivatedEvent value) {
    return Func_void_DecorationActivatedEvent_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(const DecorationActivatedEvent& /* event */)>>
  /**
   * Specialized version of `std::optional<std::function<void(const DecorationActivatedEvent& / * event * /)>>`.
   */
  using std__optional_std__function_void_const_DecorationActivatedEvent_____event______ = std::optional<std::function<void(const DecorationActivatedEvent& /* event */)>>;
  inline std::optional<std::function<void(const DecorationActivatedEvent& /* event */)>> create_std__optional_std__function_void_const_DecorationActivatedEvent_____event______(const std::function<void(const DecorationActivatedEvent& /* event */)>& value) {
    return std::optional<std::function<void(const DecorationActivatedEvent& /* event */)>>(value);
  }
  
  // pragma MARK: std::function<void(const TapEvent& /* event */)>
  /**
   * Specialized version of `std::function<void(const TapEvent&)>`.
   */
  using Func_void_TapEvent = std::function<void(const TapEvent& /* event */)>;
  /**
   * Wrapper class for a `std::function<void(const TapEvent& / * event * /)>`, this can be used from Swift.
   */
  class Func_void_TapEvent_Wrapper final {
  public:
    explicit Func_void_TapEvent_Wrapper(std::function<void(const TapEvent& /* event */)>&& func): _function(std::make_shared<std::function<void(const TapEvent& /* event */)>>(std::move(func))) {}
    inline void call(TapEvent event) const {
      _function->operator()(event);
    }
  private:
    std::shared_ptr<std::function<void(const TapEvent& /* event */)>> _function;
  };
  Func_void_TapEvent create_Func_void_TapEvent(void* _Nonnull swiftClosureWrapper);
  inline Func_void_TapEvent_Wrapper wrap_Func_void_TapEvent(Func_void_TapEvent value) {
    return Func_void_TapEvent_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(const TapEvent& /* event */)>>
  /**
   * Specialized version of `std::optional<std::function<void(const TapEvent& / * event * /)>>`.
   */
  using std__optional_std__function_void_const_TapEvent_____event______ = std::optional<std::function<void(const TapEvent& /* event */)>>;
  inline std::optional<std::function<void(const TapEvent& /* event */)>> create_std__optional_std__function_void_const_TapEvent_____event______(const std::function<void(const TapEvent& /* event */)>& value) {
    return std::optional<std::function<void(const TapEvent& /* event */)>>(value);
  }
  
  // pragma MARK: std::function<void(const DragEvent& /* event */)>
  /**
   * Specialized version of `std::function<void(const DragEvent&)>`.
   */
  using Func_void_DragEvent = std::function<void(const DragEvent& /* event */)>;
  /**
   * Wrapper class for a `std::function<void(const DragEvent& / * event * /)>`, this can be used from Swift.
   */
  class Func_void_DragEvent_Wrapper final {
  public:
    explicit Func_void_DragEvent_Wrapper(std::function<void(const DragEvent& /* event */)>&& func): _function(std::make_shared<std::function<void(const DragEvent& /* event */)>>(std::move(func))) {}
    inline void call(DragEvent event) const {
      _function->operator()(event);
    }
  private:
    std::shared_ptr<std::function<void(const DragEvent& /* event */)>> _function;
  };
  Func_void_DragEvent create_Func_void_DragEvent(void* _Nonnull swiftClosureWrapper);
  inline Func_void_DragEvent_Wrapper wrap_Func_void_DragEvent(Func_void_DragEvent value) {
    return Func_void_DragEvent_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(const DragEvent& /* event */)>>
  /**
   * Specialized version of `std::optional<std::function<void(const DragEvent& / * event * /)>>`.
   */
  using std__optional_std__function_void_const_DragEvent_____event______ = std::optional<std::function<void(const DragEvent& /* event */)>>;
  inline std::optional<std::function<void(const DragEvent& /* event */)>> create_std__optional_std__function_void_const_DragEvent_____event______(const std::function<void(const DragEvent& /* event */)>& value) {
    return std::optional<std::function<void(const DragEvent& /* event */)>>(value);
  }
  
  // pragma MARK: std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>
  /**
   * Specialized version of `std::function<void(double, double, const Locator&)>`.
   */
  using Func_void_double_double_Locator = std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>;
  /**
   * Wrapper class for a `std::function<void(double / * page * /, double / * totalPages * /, const Locator& / * locator * /)>`, this can be used from Swift.
   */
  class Func_void_double_double_Locator_Wrapper final {
  public:
    explicit Func_void_double_double_Locator_Wrapper(std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>&& func): _function(std::make_shared<std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>>(std::move(func))) {}
    inline void call(double page, double totalPages, Locator locator) const {
      _function->operator()(page, totalPages, locator);
    }
  private:
    std::shared_ptr<std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>> _function;
  };
  Func_void_double_double_Locator create_Func_void_double_double_Locator(void* _Nonnull swiftClosureWrapper);
  inline Func_void_double_double_Locator_Wrapper wrap_Func_void_double_double_Locator(Func_void_double_double_Locator value) {
    return Func_void_double_double_Locator_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>>
  /**
   * Specialized version of `std::optional<std::function<void(double / * page * /, double / * totalPages * /, const Locator& / * locator * /)>>`.
   */
  using std__optional_std__function_void_double____page_____double____totalPages_____const_Locator_____locator______ = std::optional<std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>>;
  inline std::optional<std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>> create_std__optional_std__function_void_double____page_____double____totalPages_____const_Locator_____locator______(const std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>& value) {
    return std::optional<std::function<void(double /* page */, double /* totalPages */, const Locator& /* locator */)>>(value);
  }
  
  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_shared<std::function<void()>>(std::move(func))) {}
    inline void call() const {
      _function->operator()();
    }
  private:
    std::shared_ptr<std::function<void()>> _function;
  };
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper);
  inline Func_void_Wrapper wrap_Func_void(Func_void value) {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void()>>
  /**
   * Specialized version of `std::optional<std::function<void()>>`.
   */
  using std__optional_std__function_void____ = std::optional<std::function<void()>>;
  inline std::optional<std::function<void()>> create_std__optional_std__function_void____(const std::function<void()>& value) {
    return std::optional<std::function<void()>>(value);
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::optional<std::string>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::optional<std::string>>>`.
   */
  using std__shared_ptr_Promise_std__optional_std__string___ = std::shared_ptr<Promise<std::optional<std::string>>>;
  inline std::shared_ptr<Promise<std::optional<std::string>>> create_std__shared_ptr_Promise_std__optional_std__string___() {
    return Promise<std::optional<std::string>>::create();
  }
  inline PromiseHolder<std::optional<std::string>> wrap_std__shared_ptr_Promise_std__optional_std__string___(std::shared_ptr<Promise<std::optional<std::string>>> promise) {
    return PromiseHolder<std::optional<std::string>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::optional<std::string>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::optional<std::string>&)>`.
   */
  using Func_void_std__optional_std__string_ = std::function<void(const std::optional<std::string>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::optional<std::string>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__optional_std__string__Wrapper final {
  public:
    explicit Func_void_std__optional_std__string__Wrapper(std::function<void(const std::optional<std::string>& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::optional<std::string>& /* result */)>>(std::move(func))) {}
    inline void call(std::optional<std::string> result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::optional<std::string>& /* result */)>> _function;
  };
  Func_void_std__optional_std__string_ create_Func_void_std__optional_std__string_(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__optional_std__string__Wrapper wrap_Func_void_std__optional_std__string_(Func_void_std__optional_std__string_ value) {
    return Func_void_std__optional_std__string__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitroreadium::HybridNitroReadiumSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::nitroreadium::HybridNitroReadiumSpec>`.
   */
  using std__shared_ptr_margelo__nitro__nitroreadium__HybridNitroReadiumSpec_ = std::shared_ptr<margelo::nitro::nitroreadium::HybridNitroReadiumSpec>;
  std::shared_ptr<margelo::nitro::nitroreadium::HybridNitroReadiumSpec> create_std__shared_ptr_margelo__nitro__nitroreadium__HybridNitroReadiumSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitroreadium__HybridNitroReadiumSpec_(std__shared_ptr_margelo__nitro__nitroreadium__HybridNitroReadiumSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::nitroreadium::HybridNitroReadiumSpec>
  using std__weak_ptr_margelo__nitro__nitroreadium__HybridNitroReadiumSpec_ = std::weak_ptr<margelo::nitro::nitroreadium::HybridNitroReadiumSpec>;
  inline std__weak_ptr_margelo__nitro__nitroreadium__HybridNitroReadiumSpec_ weakify_std__shared_ptr_margelo__nitro__nitroreadium__HybridNitroReadiumSpec_(const std::shared_ptr<margelo::nitro::nitroreadium::HybridNitroReadiumSpec>& strong) { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::optional<std::string>>>>
  using Result_std__shared_ptr_Promise_std__optional_std__string____ = Result<std::shared_ptr<Promise<std::optional<std::string>>>>;
  inline Result_std__shared_ptr_Promise_std__optional_std__string____ create_Result_std__shared_ptr_Promise_std__optional_std__string____(const std::shared_ptr<Promise<std::optional<std::string>>>& value) {
    return Result<std::shared_ptr<Promise<std::optional<std::string>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__optional_std__string____ create_Result_std__shared_ptr_Promise_std__optional_std__string____(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::optional<std::string>>>>::withError(error);
  }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) {
    return Result<void>::withError(error);
  }

} // namespace margelo::nitro::nitroreadium::bridge::swift
