///
/// HybridNitroReadiumSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.nitroreadium

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*
import com.margelo.nitro.views.*

/**
 * A Kotlin class representing the NitroReadium HybridObject.
 * Implement this abstract class to create Kotlin-based instances of NitroReadium.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridNitroReadiumSpec: HybridView() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var nitroSource: NitroFileSource
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var locator: Locator?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var preferences: EpubPreferences?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var decorations: Array<Decoration>?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var injectedJavascriptOnResourcesLoad: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var injectedJavascriptOnPageLoad: String?
  
  abstract var onLocatorChanged: ((locator: Locator) -> Unit)?
  
  private var onLocatorChanged_cxx: Func_void_Locator?
    @Keep
    @DoNotStrip
    get() {
      return onLocatorChanged?.let { Func_void_Locator_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onLocatorChanged = value?.let { it }
    }
  
  abstract var onSelection: ((selection: Selection?) -> Unit)?
  
  private var onSelection_cxx: Func_void_std__optional_Selection_?
    @Keep
    @DoNotStrip
    get() {
      return onSelection?.let { Func_void_std__optional_Selection__java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onSelection = value?.let { it }
    }
  
  abstract var onDecorationActivated: ((event: DecorationActivatedEvent) -> Unit)?
  
  private var onDecorationActivated_cxx: Func_void_DecorationActivatedEvent?
    @Keep
    @DoNotStrip
    get() {
      return onDecorationActivated?.let { Func_void_DecorationActivatedEvent_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onDecorationActivated = value?.let { it }
    }
  
  abstract var onTap: ((event: TapEvent) -> Unit)?
  
  private var onTap_cxx: Func_void_TapEvent?
    @Keep
    @DoNotStrip
    get() {
      return onTap?.let { Func_void_TapEvent_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onTap = value?.let { it }
    }
  
  abstract var onDrag: ((event: DragEvent) -> Unit)?
  
  private var onDrag_cxx: Func_void_DragEvent?
    @Keep
    @DoNotStrip
    get() {
      return onDrag?.let { Func_void_DragEvent_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onDrag = value?.let { it }
    }
  
  abstract var onPageChanged: ((page: Double, totalPages: Double, locator: Locator) -> Unit)?
  
  private var onPageChanged_cxx: Func_void_double_double_Locator?
    @Keep
    @DoNotStrip
    get() {
      return onPageChanged?.let { Func_void_double_double_Locator_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onPageChanged = value?.let { it }
    }
  
  abstract var onPageLoaded: (() -> Unit)?
  
  private var onPageLoaded_cxx: Func_void?
    @Keep
    @DoNotStrip
    get() {
      return onPageLoaded?.let { Func_void_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onPageLoaded = value?.let { it }
    }
  
  abstract var onPreferencesChanged: ((preferences: EpubPreferences) -> Unit)?
  
  private var onPreferencesChanged_cxx: Func_void_EpubPreferences?
    @Keep
    @DoNotStrip
    get() {
      return onPreferencesChanged?.let { Func_void_EpubPreferences_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onPreferencesChanged = value?.let { it }
    }
  
  abstract var onMessage: ((message: String) -> Unit)?
  
  private var onMessage_cxx: Func_void_std__string?
    @Keep
    @DoNotStrip
    get() {
      return onMessage?.let { Func_void_std__string_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onMessage = value?.let { it }
    }

  // Methods
  @DoNotStrip
  @Keep
  abstract fun evaluateJavascript(script: String): Promise<String?>
  
  @DoNotStrip
  @Keep
  abstract fun injectJavascript(script: String): Unit
  
  @DoNotStrip
  @Keep
  abstract fun go(locator: Locator): Unit
  
  @DoNotStrip
  @Keep
  abstract fun clearSelection(): Unit
  
  @DoNotStrip
  @Keep
  abstract fun getSettings(): EpubPreferences

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridNitroReadiumSpec"
  }
}
