///
/// JNitroFileSource.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroFileSource.hpp"

#include <optional>
#include <string>

namespace margelo::nitro::nitroreadium {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroFileSource" and the the Kotlin data class "NitroFileSource".
   */
  struct JNitroFileSource final: public jni::JavaClass<JNitroFileSource> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitroreadium/NitroFileSource;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroFileSource by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroFileSource toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldUri = clazz->getField<jni::JString>("uri");
      jni::local_ref<jni::JString> uri = this->getFieldValue(fieldUri);
      static const auto fieldInitialLocation = clazz->getField<jni::JString>("initialLocation");
      jni::local_ref<jni::JString> initialLocation = this->getFieldValue(fieldInitialLocation);
      return NitroFileSource(
        uri->toStdString(),
        initialLocation != nullptr ? std::make_optional(initialLocation->toStdString()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroFileSource::javaobject> fromCpp(const NitroFileSource& value) {
      return newInstance(
        jni::make_jstring(value.uri),
        value.initialLocation.has_value() ? jni::make_jstring(value.initialLocation.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitroreadium
