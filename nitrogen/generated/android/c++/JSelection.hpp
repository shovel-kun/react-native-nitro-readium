///
/// JSelection.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "Selection.hpp"

#include "JLocations.hpp"
#include "JLocator.hpp"
#include "JRect.hpp"
#include "JTextObject.hpp"
#include "Locations.hpp"
#include "Locator.hpp"
#include "Rect.hpp"
#include "TextObject.hpp"
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::nitroreadium {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "Selection" and the the Kotlin data class "Selection".
   */
  struct JSelection final: public jni::JavaClass<JSelection> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitroreadium/Selection;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct Selection by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    Selection toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldLocator = clazz->getField<JLocator>("locator");
      jni::local_ref<JLocator> locator = this->getFieldValue(fieldLocator);
      static const auto fieldRect = clazz->getField<JRect>("rect");
      jni::local_ref<JRect> rect = this->getFieldValue(fieldRect);
      return Selection(
        locator->toCpp(),
        rect != nullptr ? std::make_optional(rect->toCpp()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JSelection::javaobject> fromCpp(const Selection& value) {
      return newInstance(
        JLocator::fromCpp(value.locator),
        value.rect.has_value() ? JRect::fromCpp(value.rect.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitroreadium
