///
/// JFunc_void_DecorationActivatedEvent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include <functional>
#include "DecorationActivatedEvent.hpp"
#include "JDecorationActivatedEvent.hpp"
#include "Decoration.hpp"
#include "JDecoration.hpp"
#include <string>
#include "Locator.hpp"
#include "JLocator.hpp"
#include <optional>
#include "Locations.hpp"
#include "JLocations.hpp"
#include <vector>
#include "TextObject.hpp"
#include "JTextObject.hpp"
#include "DecorationStyle.hpp"
#include "JDecorationStyle.hpp"
#include "DecorationType.hpp"
#include "JDecorationType.hpp"
#include "Rect.hpp"
#include "JRect.hpp"
#include "Point.hpp"
#include "JPoint.hpp"

namespace margelo::nitro::nitroreadium {

  using namespace facebook;

  /**
   * Represents the Java/Kotlin callback `(event: DecorationActivatedEvent) -> Unit`.
   * This can be passed around between C++ and Java/Kotlin.
   */
  struct JFunc_void_DecorationActivatedEvent: public jni::JavaClass<JFunc_void_DecorationActivatedEvent> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitroreadium/Func_void_DecorationActivatedEvent;";

  public:
    /**
     * Invokes the function this `JFunc_void_DecorationActivatedEvent` instance holds through JNI.
     */
    void invoke(const DecorationActivatedEvent& event) const {
      static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JDecorationActivatedEvent> /* event */)>("invoke");
      method(self(), JDecorationActivatedEvent::fromCpp(event));
    }
  };

  /**
   * An implementation of Func_void_DecorationActivatedEvent that is backed by a C++ implementation (using `std::function<...>`)
   */
  struct JFunc_void_DecorationActivatedEvent_cxx final: public jni::HybridClass<JFunc_void_DecorationActivatedEvent_cxx, JFunc_void_DecorationActivatedEvent> {
  public:
    static jni::local_ref<JFunc_void_DecorationActivatedEvent::javaobject> fromCpp(const std::function<void(const DecorationActivatedEvent& /* event */)>& func) {
      return JFunc_void_DecorationActivatedEvent_cxx::newObjectCxxArgs(func);
    }

  public:
    /**
     * Invokes the C++ `std::function<...>` this `JFunc_void_DecorationActivatedEvent_cxx` instance holds.
     */
    void invoke_cxx(jni::alias_ref<JDecorationActivatedEvent> event) {
      _func(event->toCpp());
    }

  public:
    [[nodiscard]]
    inline const std::function<void(const DecorationActivatedEvent& /* event */)>& getFunction() const {
      return _func;
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitroreadium/Func_void_DecorationActivatedEvent_cxx;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("invoke_cxx", JFunc_void_DecorationActivatedEvent_cxx::invoke_cxx)});
    }

  private:
    explicit JFunc_void_DecorationActivatedEvent_cxx(const std::function<void(const DecorationActivatedEvent& /* event */)>& func): _func(func) { }

  private:
    friend HybridBase;
    std::function<void(const DecorationActivatedEvent& /* event */)> _func;
  };

} // namespace margelo::nitro::nitroreadium
