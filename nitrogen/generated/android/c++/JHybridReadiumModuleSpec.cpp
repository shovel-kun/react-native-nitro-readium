///
/// JHybridReadiumModuleSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridReadiumModuleSpec.hpp"

// Forward declaration of `HybridPublicationSpec` to properly resolve imports.
namespace margelo::nitro::nitroreadium { class HybridPublicationSpec; }

#include <NitroModules/Promise.hpp>
#include <optional>
#include <memory>
#include "HybridPublicationSpec.hpp"
#include <NitroModules/JPromise.hpp>
#include "JHybridPublicationSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>
#include <string>

namespace margelo::nitro::nitroreadium {

  jni::local_ref<JHybridReadiumModuleSpec::jhybriddata> JHybridReadiumModuleSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridReadiumModuleSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridReadiumModuleSpec::initHybrid),
    });
  }

  size_t JHybridReadiumModuleSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  double JHybridReadiumModuleSpec::add(double a, double b) {
    static const auto method = javaClassStatic()->getMethod<double(double /* a */, double /* b */)>("add");
    auto __result = method(_javaPart, a, b);
    return __result;
  }
  std::shared_ptr<Promise<std::optional<std::shared_ptr<margelo::nitro::nitroreadium::HybridPublicationSpec>>>> JHybridReadiumModuleSpec::openPublication(const std::string& absoluteUrl) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* absoluteUrl */)>("openPublication");
    auto __result = method(_javaPart, jni::make_jstring(absoluteUrl));
    return [&]() {
      auto __promise = Promise<std::optional<std::shared_ptr<margelo::nitro::nitroreadium::HybridPublicationSpec>>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JHybridPublicationSpec::javaobject>(__boxedResult);
        __promise->resolve(__result != nullptr ? std::make_optional(JNISharedPtr::make_shared_from_jni<JHybridPublicationSpec>(jni::make_global(__result))) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::nitroreadium
