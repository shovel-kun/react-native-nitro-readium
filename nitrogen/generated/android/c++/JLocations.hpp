///
/// JLocations.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "Locations.hpp"

#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::nitroreadium {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "Locations" and the the Kotlin data class "Locations".
   */
  struct JLocations final: public jni::JavaClass<JLocations> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitroreadium/Locations;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct Locations by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    Locations toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldFragments = clazz->getField<jni::JArrayClass<jni::JString>>("fragments");
      jni::local_ref<jni::JArrayClass<jni::JString>> fragments = this->getFieldValue(fieldFragments);
      static const auto fieldProgression = clazz->getField<jni::JDouble>("progression");
      jni::local_ref<jni::JDouble> progression = this->getFieldValue(fieldProgression);
      static const auto fieldPosition = clazz->getField<jni::JDouble>("position");
      jni::local_ref<jni::JDouble> position = this->getFieldValue(fieldPosition);
      static const auto fieldTotalProgression = clazz->getField<jni::JDouble>("totalProgression");
      jni::local_ref<jni::JDouble> totalProgression = this->getFieldValue(fieldTotalProgression);
      return Locations(
        fragments != nullptr ? std::make_optional([&]() {
          size_t __size = fragments->size();
          std::vector<std::string> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = fragments->getElement(__i);
            __vector.push_back(__element->toStdString());
          }
          return __vector;
        }()) : std::nullopt,
        progression != nullptr ? std::make_optional(progression->value()) : std::nullopt,
        position != nullptr ? std::make_optional(position->value()) : std::nullopt,
        totalProgression != nullptr ? std::make_optional(totalProgression->value()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JLocations::javaobject> fromCpp(const Locations& value) {
      return newInstance(
        value.fragments.has_value() ? [&]() {
          size_t __size = value.fragments.value().size();
          jni::local_ref<jni::JArrayClass<jni::JString>> __array = jni::JArrayClass<jni::JString>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.fragments.value()[__i];
            __array->setElement(__i, *jni::make_jstring(__element));
          }
          return __array;
        }() : nullptr,
        value.progression.has_value() ? jni::JDouble::valueOf(value.progression.value()) : nullptr,
        value.position.has_value() ? jni::JDouble::valueOf(value.position.value()) : nullptr,
        value.totalProgression.has_value() ? jni::JDouble::valueOf(value.totalProgression.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitroreadium
